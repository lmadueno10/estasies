{"version":3,"file":"index.js","sourceRoot":"","sources":["src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport * as path from 'path';\nimport {Worker} from 'worker_threads';\nimport type {Message} from './worker/types.js';\n\ntype LitPluginOptions = {\n  componentModules?: string[];\n  mode?: 'vm' | 'worker';\n};\n\nfunction configureWorker(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  eleventyConfig: any,\n  resolvedComponentModules: string[]\n) {\n  let worker: Worker;\n\n  const requestIdResolveMap = new Map<number, Function>();\n  let requestId = 0;\n\n  eleventyConfig.on('eleventy.before', async () => {\n    worker = new Worker(path.resolve(__dirname, './worker/worker.js'));\n\n    worker.on('error', (err) => {\n      console.error(\n        'Unexpected error while rendering lit component in worker thread',\n        err\n      );\n      throw err;\n    });\n\n    let requestResolve: (value?: unknown) => void;\n    const requestPromise = new Promise((resolve) => {\n      requestResolve = resolve;\n    });\n\n    worker.on('message', (message: Message) => {\n      switch (message.type) {\n        case 'initialize-response': {\n          requestResolve();\n          break;\n        }\n\n        case 'render-response': {\n          const {id, rendered} = message;\n          const resolve = requestIdResolveMap.get(id);\n          if (resolve === undefined) {\n            throw new Error(\n              '@lit-labs/eleventy-plugin-lit received invalid render-response message'\n            );\n          }\n          resolve(rendered);\n          requestIdResolveMap.delete(id);\n          break;\n        }\n      }\n    });\n\n    const message: Message = {\n      type: 'initialize-request',\n      imports: resolvedComponentModules,\n    };\n\n    worker.postMessage(message);\n    await requestPromise;\n  });\n\n  eleventyConfig.on('eleventy.after', async () => {\n    await worker.terminate();\n  });\n\n  eleventyConfig.addTransform(\n    'render-lit',\n    async (content: string, outputPath: string | false) => {\n      if (outputPath && !outputPath.endsWith('.html')) {\n        return content;\n      }\n\n      const renderedContent: string = await new Promise((resolve) => {\n        requestIdResolveMap.set(requestId, resolve);\n        const message: Message = {\n          type: 'render-request',\n          id: requestId++,\n          content,\n        };\n        worker.postMessage(message);\n      });\n\n      const outerMarkersTrimmed = trimOuterMarkers(renderedContent);\n      return outerMarkersTrimmed;\n    }\n  );\n}\n\nfunction configureVm(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  eleventyConfig: any,\n  resolvedComponentModules: string[]\n) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  if (require('vm').Module === undefined) {\n    // Show a more friendly error message if the --experimental-vm-modules\n    // flag is missing.\n    const red = '\\u001b[31m';\n    const yellow = '\\u001b[33m';\n    const reset = '\\u001b[0m';\n    console.error(\n      `${yellow}\n┌─────────────────────${red} ERROR ${yellow}─────────────────────┐\n│${reset}                                                 ${yellow}│\n│${reset} @lit-labs/eleventy-plugin-lit requires Node     ${yellow}│\n│${reset} version 12.16.0 or higher, and that eleventy is ${yellow}│\n│${reset} launched with a special environment variable    ${yellow}│\n│${reset} to enable an experimental feature:              ${yellow}│\n│${reset}                                                 ${yellow}│\n│${reset} NODE_OPTIONS=--experimental-vm-modules eleventy ${yellow}│\n│${reset}                                                 ${yellow}│\n└─────────────────────────────────────────────────┘\n${reset}`\n    );\n    throw new Error(\n      '@lit-labs/eleventy-plugin-lit requires that eleventy be launched ' +\n        'with NODE_OPTIONS=--experimental-vm-modules'\n    );\n  }\n\n  const renderModulePath = path.join(process.cwd(), 'arbitrary.js');\n  let contextifiedRender: (value: unknown) => IterableIterator<string>;\n  let contextifiedUnsafeHTML: (value: string) => unknown;\n\n  // Create a fresh context before each build, so that our module cache resets\n  // on every --watch mode build.\n\n  // TODO(aomarks) For better performance, we could re-use contexts between\n  // build, but selectively invalidate its cache so that only the user's\n  // modules are reloaded.\n  eleventyConfig.on('eleventy.before', async () => {\n    // Note this file must be CommonJS for compatibility with Eleventy, but\n    // TypeScript's CommonJS output mode will also convert dynamic import()\n    // calls to require() calls. That would be bad, because we need\n    // to import ES modules from @lit-labs/ssr, which requires preserved\n    // import() calls.\n    // So we use eval(`import()`) instead\n    //\n    // See https://github.com/microsoft/TypeScript/issues/43329 for details\n    const {getWindow} = (await eval(\n      `import('@lit-labs/ssr/lib/dom-shim.js')`\n    )) as typeof import('@lit-labs/ssr/lib/dom-shim.js');\n    const {ModuleLoader} = (await eval(\n      `import('@lit-labs/ssr/lib/module-loader.js')`\n    )) as typeof import('@lit-labs/ssr/lib/module-loader.js');\n    const window = getWindow({includeJSBuiltIns: true});\n    const loader = new ModuleLoader({global: window});\n    // TODO(aomarks) Replace with concurrent Promise.all version once\n    // https://github.com/lit/lit/issues/2549 has been addressed.\n    for (const module of resolvedComponentModules) {\n      await loader.importModule(module, renderModulePath);\n    }\n    contextifiedRender = (\n      await loader.importModule(\n        '@lit-labs/ssr/lib/render-lit-html.js',\n        renderModulePath\n      )\n    ).module.namespace.render as typeof contextifiedRender;\n    // TOOD(aomarks) We could also directly synthesize an html TemplateResult\n    // instead of doing so via the the unsafeHTML directive. The directive is\n    // performing some extra validation that doesn't really apply to us.\n    contextifiedUnsafeHTML = (\n      await loader.importModule(\n        'lit/directives/unsafe-html.js',\n        renderModulePath\n      )\n    ).module.namespace.unsafeHTML as typeof contextifiedUnsafeHTML;\n  });\n\n  eleventyConfig.addTransform(\n    'render-lit',\n    async (content: string, outputPath: string | false) => {\n      if (outputPath && !outputPath.endsWith('.html')) {\n        return content;\n      }\n\n      // TODO(aomarks) Maybe we should provide a `renderUnsafeHtml` function\n      // directly from SSR which does this.\n      const iterator = contextifiedRender(contextifiedUnsafeHTML(content));\n      const concatenated = iterableToString(iterator);\n\n      const outerMarkersTrimmed = trimOuterMarkers(concatenated);\n      return outerMarkersTrimmed;\n    }\n  );\n}\n\nmodule.exports = {\n  configFunction: function (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    eleventyConfig: any,\n    {componentModules, mode = 'worker'}: LitPluginOptions = {}\n  ) {\n    if (componentModules === undefined || componentModules.length === 0) {\n      // If there are no component modules, we could never have anything to\n      // render.\n      return;\n    }\n\n    const resolvedComponentModules = componentModules.map((module) =>\n      path.resolve(process.cwd(), module)\n    );\n\n    switch (mode) {\n      case 'worker': {\n        configureWorker(eleventyConfig, resolvedComponentModules);\n        break;\n      }\n      case 'vm': {\n        configureVm(eleventyConfig, resolvedComponentModules);\n        break;\n      }\n      default: {\n        throw new Error(\n          'Invalid mode provided for @lit-labs/eleventy-plugin-lit'\n        );\n      }\n    }\n  },\n};\n\n// Lit SSR includes comment markers to track the outer template from\n// the template we've generated here, but it's not possible for this\n// outer template to be hydrated, so they serve no purpose.\n\n// TODO(aomarks) Maybe we should provide an option to SSR option to skip\n// outer markers (though note there are 2 layers of markers due to the\n// use of the unsafeHTML directive).\nfunction trimOuterMarkers(renderedContent: string): string {\n  return renderedContent\n    .replace(/^((<!--[^<>]*-->)|(<\\?>)|\\s)+/, '')\n    .replace(/((<!--[^<>]*-->)|(<\\?>)|\\s)+$/, '');\n}\n\n// Assuming this is faster than Array.from(iter).join();\n// TODO: perf test\nconst iterableToString = (iterable: Iterable<string>) => {\n  let s = '';\n  for (const i of iterable) {\n    s += i;\n  }\n  return s;\n};\n"]}