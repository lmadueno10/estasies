{"version":3,"file":"worker.js","sourceRoot":"","sources":["../src/worker/worker.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAC,UAAU,EAAC,MAAM,gBAAgB,CAAC;AAC1C,OAAO,EAAC,MAAM,EAAC,MAAM,kDAAkD,CAAC;AACxE,OAAO,EAAC,UAAU,EAAC,MAAM,+BAA+B,CAAC;AAIzD,IAAI,UAAU,KAAK,IAAI,EAAE;IACvB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;CAClE;AAED,IAAI,WAAW,GAAG,KAAK,CAAC;AAExB,UAAU,CAAC,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,OAAgB,EAAE,EAAE;IAClD,QAAQ,OAAO,CAAC,IAAI,EAAE;QACpB,KAAK,oBAAoB,CAAC,CAAC;YACzB,IAAI,CAAC,WAAW,EAAE;gBAChB,MAAM,EAAC,OAAO,EAAC,GAAG,OAAO,CAAC;gBAC1B,MAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC3D,MAAM,QAAQ,GAAY,EAAC,IAAI,EAAE,qBAAqB,EAAC,CAAC;gBACxD,UAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;aACnC;YACD,WAAW,GAAG,IAAI,CAAC;YACnB,MAAM;SACP;QAED,KAAK,gBAAgB,CAAC,CAAC;YACrB,MAAM,EAAC,EAAE,EAAE,OAAO,EAAC,GAAG,OAAO,CAAC;YAC9B,IAAI,QAAQ,GAAG,EAAE,CAAC;YAClB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE;gBAC7C,QAAQ,IAAI,GAAG,CAAC;aACjB;YACD,MAAM,QAAQ,GAAY;gBACxB,IAAI,EAAE,iBAAiB;gBACvB,EAAE;gBACF,QAAQ;aACT,CAAC;YACF,UAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAClC,MAAM;SACP;KACF;AACH,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {parentPort} from 'worker_threads';\nimport {render} from '@lit-labs/ssr/lib/render-with-global-dom-shim.js';\nimport {unsafeHTML} from 'lit/directives/unsafe-html.js';\n\nimport type {Message} from './types.js';\n\nif (parentPort === null) {\n  throw new Error('worker.js must only be run in a worker thread');\n}\n\nlet initialized = false;\n\nparentPort.on('message', async (message: Message) => {\n  switch (message.type) {\n    case 'initialize-request': {\n      if (!initialized) {\n        const {imports} = message;\n        await Promise.all(imports.map((module) => import(module)));\n        const response: Message = {type: 'initialize-response'};\n        parentPort!.postMessage(response);\n      }\n      initialized = true;\n      break;\n    }\n\n    case 'render-request': {\n      const {id, content} = message;\n      let rendered = '';\n      for (const str of render(unsafeHTML(content))) {\n        rendered += str;\n      }\n      const response: Message = {\n        type: 'render-response',\n        id,\n        rendered,\n      };\n      parentPort!.postMessage(response);\n      break;\n    }\n  }\n});\n"]}